structure A = Absyn
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | UMINUS | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  
     program of A.exp
   | record_exp of A.exp | record_aux
   | func_exp of A.exp | func_aux of A.exp list
   | lvalue of A.VarExp | lvalue_aux 
   | expseq of A.SeqExp | expseq_aux of A.SeqExp 
   | decs of A.dec list | dec of A.dec | fundec of A.FunctionDec | tydec of A.TypeDec | tyfields of A.tfield list | tyfields_aux of A.tfield list | vardec of A.VarDec | ty
   | let_exp of A.exp | assign_exp of A.exp | array_exp of A.exp | loop_exp of A.exp | if_exp of A.exp
   | ari_exp of A.exp | bool_exp of A.exp | cmp_exp of A.exp | uni_exp of A.exp | exp of A.exp


%pos int
%verbose

%nonassoc DO
%nonassoc THEN
%nonassoc ELSE
%nonassoc ASSIGN
%nonassoc OF
%left OR
%left AND
%nonassoc EQ NEQ LT GT LE GE
%nonassoc LBRACK
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS




%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				(exp)

decs :                                                       ([])
     | dec decs                                              (dec::decs)

dec : tydec                                                  (tydec)
    | vardec                                                 (vardec)
    | fundec                                                 (fundec)

tydec : TYPE ID EQ ty                                        ()

ty  : ID                                                     (A.NameTy symbol ID IDleft)
    | LBRACE tyfields RBRACE                                 (tyfields)
    | ARRAY OF ID                                            (A.ArrayTy symbol ID ARRAYleft)

tyfields :                                                   ([])
         | ID COLON ID tyfields_aux                          ({name=symbol ID1, typ=symbol ID2, pos=ID1left}::tyfields_aux)

tyfields_aux :                                               ([])
             | COMMA ID COLON ID tyfields_aux                ({name=symbol ID1, typ=symbol ID2, pos=COMMAleft}::tyfields_aux)

vardec : VAR ID ASSIGN exp               (A.VarDec {name=S.symbol(ID), escape = ref ture}:vardec, typ=NONE, init=exp, pos=VARleft)
       | VAR ID COLON ID ASSIGN exp     (A.VarDec {name=S.symbol(ID), escape = ref true}:vardec, type=SOME S.symbol(ID) IDleft init=exp, pos=VARleft)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp           ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ()


	
exp : LPAREN expseq RPAREN                                   (exp_seq)
    | let_exp                                                (let_exp)
    | loop_exp                                               (loop_exp)
    | if_exp                                                 (if_exp)
    | assign_exp                                             (assign_exp)
    | array_exp                                              (array_exp)
    | record_exp                          (record_exp)
    | func_exp                            (func_exp) 
    | ari_exp                             (ari_exp)
    | bool_exp                            (bool_exp)
    | cmp_exp                             (cmp_exp)
    | uni_exp                             (uni_exp)
    | lvalue                                                 (lvalue)

expseq :                                                     ([])
       | exp expseq_aux                                      ((exp, expleft)::expseq_aux)

expseq_aux :                                                 ([])
        | SEMICOLON exp expseq_aux		    	     ((exp, expleft)::expseq_aux)


let_exp : LET decs IN expseq END                             (A.LetExp decs? expseq LETleft)

loop_exp : BREAK                                             (A.BreakExp BREAKleft)
         | WHILE exp DO exp                                  (A.WhileExp exp1 exp2 WHILEleft)
         | FOR ID ASSIGN exp TO exp DO exp                   (A.ForExp var? exp1 exp2 exp3 FORleft)

if_exp : IF exp THEN exp                                     (A.IfExp exp1 exp2 IFleft)
       | IF exp THEN exp ELSE exp                            (A.IfExp exp1 exp2 exp3 IFleft)

assign_exp : lvalue ASSIGN exp                          (A.AssignExp var? exp lvalueleft)

array_exp : ID LBRACK exp RBRACK OF exp                 (A.ArrayExp S.symbol(ID) exp1 exp2 IDleft)
 


uni_exp : INT                    (A.IntExp INT)
        | NIL                    (A.NilExp) 
        | STRING                 (A.StringExp STRING STRINGleft)
 
cmp_exp : exp EQ exp        (A.OpExp exp1 A.EqOp exp2 exp1left)
        | exp NEQ exp       (A.OpExp exp1 A.NeqOp exp2 exp1left)  
        | exp GT exp        (A.OpExp exp1 A.GtOp exp2 exp1left) 
        | exp LT exp        (A.OpExp exp1 A.LtOp exp2 exp1left)  
        | exp GE exp        (A.OpExp exp1 A.GeOp exp2 exp1left) 
        | exp LE exp        (A.OpExp exp1 A.LeOp exp2 exp1left)

bool_exp : exp AND exp      (A.IfExp exp1 exp2 A.IntExp(0) exp1left) 
         | exp OR exp     (A.IfExp exp1 A.IntExp(1) exp2 exp1left)


ari_exp : exp PLUS exp       (A.OpExp exp1 A.PlusOp exp2 exp1left)  
        | exp MINUS exp      (A.OpExp exp1 A.MinusOp exp2 exp1left)
        | exp TIMES exp       (A.OpExp exp1 A.TimesOp exp2 exp1left)
        | exp DIVIDE exp      (A.OpExp exp1 A.DivideOp exp2 exp1left)
        | MINUS exp %prec UMINUS  (A.OpExp IntExp(0) A.MinusOp exp MINUSleft) 

record_exp : ID LBRACE RBRACE                                (A.RecordExp [] S.symbol(ID) IDleft)
           | ID LBRACE ID EQ exp record_aux RBRACE           (A.RecordExp A.efields(S.symbol(ID2), exp, ID2left)::record_aux ID1left)
   
record_aux  :                               ([]) 
    | COMMA ID EQ exp record_aux            (A.efields(S.symbol(ID), exp, IDleft)::record_aux)

func_exp : ID LPAREN RPAREN                     (A.AppExp S.symbol(ID) [] IDleft)
         | ID LPAREN exp func_aux RPAREN        (A.AppExp S.symbol(ID) exp::func_aux IDleft)

func_aux  :                                                  ([])
    | COMMA exp func_aux                                     (exp::func_aux)

lvalue  : ID lvalue_aux ()

lvalue_aux :                                                 () 
           | DOT ID lvalue_aux                               ()
           | LBRACK exp RBRACK lvalue_aux                    ()


