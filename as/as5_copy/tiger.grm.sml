functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn
structure S = Symbol

datatype lvalue_var
    = Field of A.symbol * A.pos
    | Subscript of A.exp * A.pos

fun lvalue_gen(v, []) = v
  | lvalue_gen(v, Field(s, p)::r) = lvalue_gen(A.FieldVar (v, s, p), r)
  | lvalue_gen(v, Subscript(e, p)::r) = lvalue_gen(A.SubscriptVar (v, e, p), r)
    
fun formalize([]) = []
  | formalize(({name=n,typ=t,pos=p}:A.tfield)::r) = ({var={name=n, escape=ref true}, typ=t, pos=p}:A.formals) :: formalize(r)



end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\213\000\005\000\213\000\007\000\213\000\009\000\213\000\
\\011\000\213\000\013\000\213\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\213\000\027\000\213\000\
\\031\000\213\000\032\000\213\000\035\000\213\000\036\000\213\000\
\\038\000\213\000\039\000\213\000\043\000\213\000\044\000\213\000\
\\045\000\213\000\000\000\
\\001\000\001\000\214\000\005\000\214\000\007\000\214\000\009\000\214\000\
\\011\000\214\000\013\000\214\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\214\000\027\000\214\000\
\\031\000\214\000\032\000\214\000\035\000\214\000\036\000\214\000\
\\038\000\214\000\039\000\214\000\043\000\214\000\044\000\214\000\
\\045\000\214\000\000\000\
\\001\000\001\000\215\000\005\000\215\000\007\000\215\000\009\000\215\000\
\\011\000\215\000\013\000\215\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\215\000\027\000\215\000\
\\031\000\215\000\032\000\215\000\035\000\215\000\036\000\215\000\
\\038\000\215\000\039\000\215\000\043\000\215\000\044\000\215\000\
\\045\000\215\000\000\000\
\\001\000\001\000\216\000\005\000\216\000\007\000\216\000\009\000\216\000\
\\011\000\216\000\013\000\216\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\216\000\027\000\216\000\
\\031\000\216\000\032\000\216\000\035\000\216\000\036\000\216\000\
\\038\000\216\000\039\000\216\000\043\000\216\000\044\000\216\000\
\\045\000\216\000\000\000\
\\001\000\001\000\217\000\005\000\217\000\007\000\217\000\009\000\217\000\
\\011\000\217\000\013\000\217\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\217\000\027\000\217\000\
\\031\000\217\000\032\000\217\000\035\000\217\000\036\000\217\000\
\\038\000\217\000\039\000\217\000\043\000\217\000\044\000\217\000\
\\045\000\217\000\000\000\
\\001\000\001\000\218\000\005\000\218\000\007\000\218\000\009\000\218\000\
\\011\000\218\000\013\000\218\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\026\000\218\000\027\000\218\000\
\\031\000\218\000\032\000\218\000\035\000\218\000\036\000\218\000\
\\038\000\218\000\039\000\218\000\043\000\218\000\044\000\218\000\
\\045\000\218\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\057\000\017\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\009\000\091\000\017\000\024\000\030\000\023\000\033\000\022\000\
\\034\000\021\000\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\017\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\001\000\002\000\052\000\000\000\
\\001\000\002\000\078\000\000\000\
\\001\000\002\000\079\000\000\000\
\\001\000\002\000\080\000\000\000\
\\001\000\002\000\086\000\000\000\
\\001\000\002\000\088\000\013\000\087\000\000\000\
\\001\000\002\000\115\000\012\000\114\000\029\000\113\000\000\000\
\\001\000\002\000\117\000\000\000\
\\001\000\002\000\146\000\000\000\
\\001\000\002\000\151\000\000\000\
\\001\000\002\000\154\000\000\000\
\\001\000\002\000\156\000\000\000\
\\001\000\002\000\163\000\000\000\
\\001\000\002\000\169\000\000\000\
\\001\000\006\000\096\000\028\000\095\000\000\000\
\\001\000\006\000\136\000\000\000\
\\001\000\006\000\150\000\020\000\149\000\000\000\
\\001\000\006\000\166\000\000\000\
\\001\000\007\000\085\000\009\000\084\000\016\000\040\000\017\000\039\000\
\\018\000\038\000\019\000\037\000\020\000\036\000\021\000\035\000\
\\022\000\034\000\023\000\033\000\024\000\032\000\025\000\031\000\
\\026\000\030\000\027\000\029\000\000\000\
\\001\000\008\000\097\000\000\000\
\\001\000\009\000\123\000\000\000\
\\001\000\009\000\128\000\000\000\
\\001\000\009\000\135\000\000\000\
\\001\000\011\000\106\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\001\000\011\000\140\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\001\000\013\000\147\000\000\000\
\\001\000\013\000\153\000\000\000\
\\001\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\031\000\083\000\000\000\
\\001\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\035\000\120\000\000\000\
\\001\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\036\000\082\000\000\000\
\\001\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\036\000\152\000\000\000\
\\001\000\020\000\094\000\000\000\
\\001\000\020\000\105\000\000\000\
\\001\000\020\000\160\000\000\000\
\\001\000\020\000\162\000\000\000\
\\001\000\028\000\081\000\000\000\
\\001\000\028\000\134\000\000\000\
\\001\000\038\000\077\000\000\000\
\\001\000\039\000\111\000\000\000\
\\001\000\040\000\132\000\000\000\
\\172\000\043\000\051\000\044\000\050\000\045\000\049\000\000\000\
\\173\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\045\000\049\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\000\000\
\\183\000\002\000\119\000\000\000\
\\184\000\000\000\
\\185\000\005\000\158\000\000\000\
\\186\000\000\000\
\\187\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\188\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\189\000\000\000\
\\190\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\043\000\051\000\000\000\
\\191\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\043\000\051\000\000\000\
\\192\000\000\000\
\\193\000\000\000\
\\194\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\195\000\000\000\
\\196\000\000\000\
\\197\000\000\000\
\\198\000\000\000\
\\199\000\000\000\
\\200\000\000\000\
\\201\000\000\000\
\\202\000\000\000\
\\203\000\000\000\
\\204\000\000\000\
\\205\000\000\000\
\\206\000\000\000\
\\207\000\000\000\
\\208\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\211\000\000\000\
\\212\000\000\000\
\\219\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\000\000\
\\220\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\000\000\
\\221\000\018\000\038\000\019\000\037\000\000\000\
\\222\000\018\000\038\000\019\000\037\000\000\000\
\\223\000\000\000\
\\224\000\000\000\
\\225\000\000\000\
\\226\000\028\000\041\000\000\000\
\\227\000\000\000\
\\228\000\008\000\062\000\010\000\061\000\012\000\060\000\014\000\059\000\000\000\
\\228\000\010\000\104\000\014\000\059\000\000\000\
\\228\000\010\000\104\000\014\000\059\000\040\000\127\000\000\000\
\\229\000\000\000\
\\230\000\000\000\
\\231\000\000\000\
\\232\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\233\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\234\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\
\\032\000\121\000\000\000\
\\235\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\236\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\237\000\016\000\040\000\017\000\039\000\018\000\038\000\019\000\037\000\
\\020\000\036\000\021\000\035\000\022\000\034\000\023\000\033\000\
\\024\000\032\000\025\000\031\000\026\000\030\000\027\000\029\000\000\000\
\\238\000\000\000\
\\239\000\000\000\
\\240\000\005\000\142\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\241\000\000\000\
\\242\000\000\000\
\\243\000\000\000\
\\244\000\005\000\108\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\245\000\000\000\
\\246\000\000\000\
\\247\000\002\000\028\000\003\000\027\000\004\000\026\000\008\000\025\000\
\\017\000\024\000\030\000\023\000\033\000\022\000\034\000\021\000\
\\037\000\020\000\041\000\019\000\042\000\018\000\000\000\
\\248\000\000\000\
\\249\000\007\000\110\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\\250\000\000\000\
\\251\000\000\000\
\\252\000\000\000\
\\253\000\007\000\122\000\016\000\040\000\017\000\039\000\018\000\038\000\
\\019\000\037\000\020\000\036\000\021\000\035\000\022\000\034\000\
\\023\000\033\000\024\000\032\000\025\000\031\000\026\000\030\000\
\\027\000\029\000\000\000\
\"
val actionRowNumbers =
"\009\000\072\000\085\000\073\000\
\\076\000\075\000\074\000\098\000\
\\077\000\079\000\078\000\083\000\
\\082\000\081\000\080\000\084\000\
\\088\000\105\000\050\000\010\000\
\\009\000\009\000\009\000\007\000\
\\089\000\087\000\100\000\009\000\
\\009\000\009\000\009\000\009\000\
\\009\000\009\000\009\000\009\000\
\\009\000\009\000\009\000\009\000\
\\053\000\055\000\052\000\067\000\
\\054\000\050\000\047\000\011\000\
\\012\000\013\000\045\000\039\000\
\\037\000\097\000\028\000\090\000\
\\099\000\014\000\015\000\009\000\
\\008\000\092\000\091\000\005\000\
\\003\000\006\000\004\000\002\000\
\\001\000\096\000\095\000\094\000\
\\093\000\110\000\051\000\121\000\
\\041\000\024\000\029\000\009\000\
\\009\000\009\000\086\000\009\000\
\\101\000\112\000\042\000\033\000\
\\118\000\116\000\123\000\048\000\
\\016\000\009\000\017\000\061\000\
\\038\000\106\000\108\000\127\000\
\\030\000\103\000\009\000\009\000\
\\102\000\031\000\009\000\122\000\
\\009\000\120\000\056\000\049\000\
\\061\000\058\000\065\000\046\000\
\\032\000\025\000\009\000\009\000\
\\009\000\125\000\034\000\114\000\
\\104\000\009\000\117\000\118\000\
\\123\000\057\000\018\000\035\000\
\\009\000\026\000\019\000\040\000\
\\109\000\126\000\101\000\036\000\
\\020\000\111\000\119\000\124\000\
\\060\000\059\000\066\000\009\000\
\\021\000\063\000\009\000\113\000\
\\043\000\068\000\044\000\062\000\
\\022\000\107\000\009\000\070\000\
\\009\000\027\000\114\000\069\000\
\\023\000\115\000\071\000\063\000\
\\064\000\000\000"
val gotoT =
"\
\\001\000\169\000\012\000\015\000\013\000\014\000\014\000\013\000\
\\015\000\012\000\017\000\011\000\019\000\010\000\020\000\009\000\
\\021\000\008\000\022\000\007\000\024\000\006\000\025\000\005\000\
\\026\000\004\000\027\000\003\000\028\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\046\000\003\000\045\000\004\000\044\000\005\000\043\000\
\\006\000\042\000\007\000\041\000\010\000\040\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\051\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\052\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\053\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\054\000\000\000\
\\000\000\
\\000\000\
\\023\000\056\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\061\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\062\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\063\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\064\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\065\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\066\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\067\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\068\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\069\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\070\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\071\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\072\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\073\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\074\000\003\000\045\000\004\000\044\000\005\000\043\000\
\\006\000\042\000\007\000\041\000\010\000\040\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\087\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\088\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\030\000\091\000\032\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\096\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\097\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\098\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\029\000\100\000\032\000\099\000\000\000\
\\023\000\101\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\105\000\000\000\
\\000\000\
\\031\000\107\000\000\000\
\\000\000\
\\011\000\110\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\114\000\000\000\
\\000\000\
\\008\000\116\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\122\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\123\000\000\000\
\\023\000\124\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\127\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\128\000\000\000\
\\000\000\
\\007\000\129\000\000\000\
\\000\000\
\\008\000\131\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\135\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\136\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\029\000\137\000\032\000\099\000\000\000\
\\000\000\
\\000\000\
\\016\000\139\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\141\000\000\000\
\\000\000\
\\018\000\142\000\000\000\
\\031\000\143\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\146\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\124\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\153\000\000\000\
\\000\000\
\\009\000\155\000\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\157\000\000\000\
\\000\000\
\\000\000\
\\005\000\159\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\162\000\000\000\
\\000\000\
\\012\000\015\000\013\000\014\000\014\000\013\000\015\000\012\000\
\\017\000\011\000\019\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\024\000\006\000\025\000\005\000\026\000\004\000\
\\027\000\003\000\028\000\002\000\032\000\163\000\000\000\
\\000\000\
\\016\000\165\000\000\000\
\\005\000\166\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\168\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 170
val numrules = 82
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | exp of unit ->  (A.exp)
 | expseq_aux of unit ->  ( ( A.exp * A.pos )  list)
 | expseq of unit ->  ( ( A.exp * A.pos )  list)
 | seq_exp_aux of unit ->  ( ( A.exp * A.pos )  list)
 | seq_exp of unit ->  (A.exp) | uni_exp of unit ->  (A.exp)
 | cmp_exp of unit ->  (A.exp) | bool_exp of unit ->  (A.exp)
 | ari_exp of unit ->  (A.exp)
 | lvalue_aux of unit ->  (lvalue_var list)
 | lvalue of unit ->  (A.var) | lvalue_exp of unit ->  (A.exp)
 | if_exp of unit ->  (A.exp) | loop_exp of unit ->  (A.exp)
 | func_aux of unit ->  (A.exp list) | func_exp of unit ->  (A.exp)
 | record_aux of unit ->  (A.efield list)
 | record_exp of unit ->  (A.exp) | array_exp of unit ->  (A.exp)
 | assign_exp of unit ->  (A.exp) | let_exp of unit ->  (A.exp)
 | ty of unit ->  (A.ty) | vardec of unit ->  (A.dec)
 | tyfields_aux of unit ->  (A.tfield list)
 | tyfields of unit ->  (A.tfield list)
 | tydecs_aux of unit ->  ({ name:A.symbol,ty:A.ty,pos:A.pos }  list)
 | tydecs of unit ->  (A.dec)
 | fundecs_aux of unit ->  (A.fundec list)
 | fundecs of unit ->  (A.dec) | dec of unit ->  (A.dec)
 | decs of unit ->  (A.dec list) | program of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 31))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "UMINUS"
  | (T 15) => "PLUS"
  | (T 16) => "MINUS"
  | (T 17) => "TIMES"
  | (T 18) => "DIVIDE"
  | (T 19) => "EQ"
  | (T 20) => "NEQ"
  | (T 21) => "LT"
  | (T 22) => "LE"
  | (T 23) => "GT"
  | (T 24) => "GE"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38)
 $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31)
 $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24)
 $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( rest671)) => let val  result = MlyValue.decs (fn _ => ([]))
 in ( LrTable.NT 1, ( result, defaultPos, defaultPos), rest671)
end
|  ( 1, ( ( _, ( MlyValue.decs decs1, _, decs1right)) :: ( _, ( 
MlyValue.dec dec1, dec1left, _)) :: rest671)) => let val  result = 
MlyValue.decs (fn _ => let val  (dec as dec1) = dec1 ()
 val  (decs as decs1) = decs1 ()
 in (dec::decs)
end)
 in ( LrTable.NT 1, ( result, dec1left, decs1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.tydecs tydecs1, tydecs1left, tydecs1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
tydecs as tydecs1) = tydecs1 ()
 in (tydecs)
end)
 in ( LrTable.NT 2, ( result, tydecs1left, tydecs1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.vardec vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
vardec as vardec1) = vardec1 ()
 in (vardec)
end)
 in ( LrTable.NT 2, ( result, vardec1left, vardec1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.fundecs fundecs1, fundecs1left, 
fundecs1right)) :: rest671)) => let val  result = MlyValue.dec (fn _
 => let val  (fundecs as fundecs1) = fundecs1 ()
 in (fundecs)
end)
 in ( LrTable.NT 2, ( result, fundecs1left, fundecs1right), rest671)

end
|  ( 5, ( ( _, ( MlyValue.tydecs_aux tydecs_aux1, tydecs_aux1left, 
tydecs_aux1right)) :: rest671)) => let val  result = MlyValue.tydecs
 (fn _ => let val  (tydecs_aux as tydecs_aux1) = tydecs_aux1 ()
 in (A.TypeDec tydecs_aux)
end)
 in ( LrTable.NT 5, ( result, tydecs_aux1left, tydecs_aux1right), 
rest671)
end
|  ( 6, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydecs_aux (fn _ => let val  (
ID as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ([{name=S.symbol(ID), ty=ty, pos=TYPEleft}])
end)
 in ( LrTable.NT 6, ( result, TYPE1left, ty1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.tydecs_aux tydecs_aux1, _, tydecs_aux1right)
) :: ( _, ( MlyValue.ty ty1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _,
 _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: rest671)) => let
 val  result = MlyValue.tydecs_aux (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (ty as ty1) = ty1 ()
 val  (tydecs_aux as tydecs_aux1) = tydecs_aux1 ()
 in (({name=S.symbol(ID), ty=ty, pos=TYPEleft})::tydecs_aux)
end)
 in ( LrTable.NT 6, ( result, TYPE1left, tydecs_aux1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy(S.symbol(ID), IDleft))
end)
 in ( LrTable.NT 10, ( result, ID1left, ID1right), rest671)
end
|  ( 9, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy(tyfields))
end)
 in ( LrTable.NT 10, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 10, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy(S.symbol(ID), ARRAYleft))
end)
 in ( LrTable.NT 10, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 11, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
[]))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 12, ( ( _, ( MlyValue.tyfields_aux tyfields_aux1, _, 
tyfields_aux1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfields (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_aux as tyfields_aux1) = tyfields_aux1 ()
 in (
({name=S.symbol(ID1), typ=S.symbol(ID2), pos=ID1left}:A.tfield) :: tyfields_aux
)
end)
 in ( LrTable.NT 7, ( result, ID1left, tyfields_aux1right), rest671)

end
|  ( 13, ( rest671)) => let val  result = MlyValue.tyfields_aux (fn _
 => ([]))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 14, ( ( _, ( MlyValue.tyfields_aux tyfields_aux1, _, 
tyfields_aux1right)) :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: ( _, ( _, COMMA1left, _)) :: rest671)
) => let val  result = MlyValue.tyfields_aux (fn _ => let val  ID1 = 
ID1 ()
 val  ID2 = ID2 ()
 val  (tyfields_aux as tyfields_aux1) = tyfields_aux1 ()
 in (
({name=S.symbol(ID1), typ=S.symbol(ID2), pos=ID1left}:A.tfield) :: tyfields_aux
)
end)
 in ( LrTable.NT 8, ( result, COMMA1left, tyfields_aux1right), rest671
)
end
|  ( 15, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec {var={name=S.symbol(ID), escape = ref true}, typ=NONE, init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec {var={name=S.symbol(ID1), escape = ref true}, typ=SOME(S.symbol(ID2), ID2left), init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.fundecs_aux fundecs_aux1, fundecs_aux1left,
 fundecs_aux1right)) :: rest671)) => let val  result = 
MlyValue.fundecs (fn _ => let val  (fundecs_aux as fundecs_aux1) = 
fundecs_aux1 ()
 in (A.FunctionDec fundecs_aux)
end)
 in ( LrTable.NT 3, ( result, fundecs_aux1left, fundecs_aux1right), 
rest671)
end
|  ( 18, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671))
 => let val  result = MlyValue.fundecs_aux (fn _ => let val  (ID as 
ID1) = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 in (
[{name=S.symbol(ID), params=formalize(tyfields), result=NONE, body=exp, pos=FUNCTIONleft}:A.fundec]
)
end)
 in ( LrTable.NT 4, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result
 = MlyValue.fundecs_aux (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
[{name=S.symbol(ID1), params=formalize(tyfields), result=SOME(S.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}]
)
end)
 in ( LrTable.NT 4, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.fundecs_aux fundecs_aux1, _, 
fundecs_aux1right)) :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: _ :: (
 _, ( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID 
ID1, _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: 
rest671)) => let val  result = MlyValue.fundecs_aux (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 val  (fundecs_aux as fundecs_aux1) = fundecs_aux1 ()
 in (
{name=S.symbol(ID), params=formalize(tyfields), result=NONE, body=exp, pos=FUNCTIONleft} :: fundecs_aux
)
end)
 in ( LrTable.NT 4, ( result, FUNCTION1left, fundecs_aux1right), 
rest671)
end
|  ( 21, ( ( _, ( MlyValue.fundecs_aux fundecs_aux1, _, 
fundecs_aux1right)) :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, (
 MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result
 = MlyValue.fundecs_aux (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 val  (fundecs_aux as fundecs_aux1) = fundecs_aux1 ()
 in (
{name=S.symbol(ID1), params=formalize(tyfields), result=SOME(S.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft} :: fundecs_aux
)
end)
 in ( LrTable.NT 4, ( result, FUNCTION1left, fundecs_aux1right), 
rest671)
end
|  ( 22, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp1right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.uni_exp uni_exp1, uni_exp1left, 
uni_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (uni_exp as uni_exp1) = uni_exp1 ()
 in (uni_exp)
end)
 in ( LrTable.NT 31, ( result, uni_exp1left, uni_exp1right), rest671)

end
|  ( 24, ( ( _, ( MlyValue.ari_exp ari_exp1, ari_exp1left, 
ari_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (ari_exp as ari_exp1) = ari_exp1 ()
 in (ari_exp)
end)
 in ( LrTable.NT 31, ( result, ari_exp1left, ari_exp1right), rest671)

end
|  ( 25, ( ( _, ( MlyValue.bool_exp bool_exp1, bool_exp1left, 
bool_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (bool_exp as bool_exp1) = bool_exp1 ()
 in (bool_exp)
end)
 in ( LrTable.NT 31, ( result, bool_exp1left, bool_exp1right), rest671
)
end
|  ( 26, ( ( _, ( MlyValue.cmp_exp cmp_exp1, cmp_exp1left, 
cmp_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (cmp_exp as cmp_exp1) = cmp_exp1 ()
 in (cmp_exp)
end)
 in ( LrTable.NT 31, ( result, cmp_exp1left, cmp_exp1right), rest671)

end
|  ( 27, ( ( _, ( MlyValue.lvalue_exp lvalue_exp1, lvalue_exp1left, 
lvalue_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (lvalue_exp as lvalue_exp1) = lvalue_exp1 ()
 in (lvalue_exp)
end)
 in ( LrTable.NT 31, ( result, lvalue_exp1left, lvalue_exp1right), 
rest671)
end
|  ( 28, ( ( _, ( MlyValue.loop_exp loop_exp1, loop_exp1left, 
loop_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (loop_exp as loop_exp1) = loop_exp1 ()
 in (loop_exp)
end)
 in ( LrTable.NT 31, ( result, loop_exp1left, loop_exp1right), rest671
)
end
|  ( 29, ( ( _, ( MlyValue.if_exp if_exp1, if_exp1left, if_exp1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
if_exp as if_exp1) = if_exp1 ()
 in (if_exp)
end)
 in ( LrTable.NT 31, ( result, if_exp1left, if_exp1right), rest671)

end
|  ( 30, ( ( _, ( MlyValue.assign_exp assign_exp1, assign_exp1left, 
assign_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assign_exp as assign_exp1) = assign_exp1 ()
 in (assign_exp)
end)
 in ( LrTable.NT 31, ( result, assign_exp1left, assign_exp1right), 
rest671)
end
|  ( 31, ( ( _, ( MlyValue.array_exp array_exp1, array_exp1left, 
array_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (array_exp as array_exp1) = array_exp1 ()
 in (array_exp)
end)
 in ( LrTable.NT 31, ( result, array_exp1left, array_exp1right), 
rest671)
end
|  ( 32, ( ( _, ( MlyValue.record_exp record_exp1, record_exp1left, 
record_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (record_exp as record_exp1) = record_exp1 ()
 in (record_exp)
end)
 in ( LrTable.NT 31, ( result, record_exp1left, record_exp1right), 
rest671)
end
|  ( 33, ( ( _, ( MlyValue.func_exp func_exp1, func_exp1left, 
func_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (func_exp as func_exp1) = func_exp1 ()
 in (func_exp)
end)
 in ( LrTable.NT 31, ( result, func_exp1left, func_exp1right), rest671
)
end
|  ( 34, ( ( _, ( MlyValue.let_exp let_exp1, let_exp1left, 
let_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (let_exp as let_exp1) = let_exp1 ()
 in (let_exp)
end)
 in ( LrTable.NT 31, ( result, let_exp1left, let_exp1right), rest671)

end
|  ( 35, ( ( _, ( MlyValue.seq_exp seq_exp1, seq_exp1left, 
seq_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (seq_exp as seq_exp1) = seq_exp1 ()
 in (seq_exp)
end)
 in ( LrTable.NT 31, ( result, seq_exp1left, seq_exp1right), rest671)

end
|  ( 36, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (exp as exp1) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 31, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 37, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.uni_exp (fn _ => let val  (INT as INT1
) = INT1 ()
 in (A.IntExp INT)
end)
 in ( LrTable.NT 26, ( result, INT1left, INT1right), rest671)
end
|  ( 38, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.uni_exp (fn _ => (A.NilExp))
 in ( LrTable.NT 26, ( result, NIL1left, NIL1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left)
, STRING1right)) :: rest671)) => let val  result = MlyValue.uni_exp
 (fn _ => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp(STRING, STRINGleft))
end)
 in ( LrTable.NT 26, ( result, STRING1left, STRING1right), rest671)

end
|  ( 40, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.uni_exp (fn _ => (
A.SeqExp []))
 in ( LrTable.NT 26, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 41, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.cmp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 25, ( result, exp1left, exp2right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left}
)
end)
 in ( LrTable.NT 24, ( result, exp1left, exp2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left}
)
end)
 in ( LrTable.NT 24, ( result, exp1left, exp2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ari_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 23, ( result, exp1left, exp2right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ari_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 23, ( result, exp1left, exp2right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ari_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 23, ( result, exp1left, exp2right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ari_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 23, ( result, exp1left, exp2right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.ari_exp (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

end)
 in ( LrTable.NT 23, ( result, MINUS1left, exp1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.lvalue_exp (fn _ => let
 val  (lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp lvalue)
end)
 in ( LrTable.NT 20, ( result, lvalue1left, lvalue1right), rest671)

end
|  ( 55, ( ( _, ( MlyValue.lvalue_aux lvalue_aux1, _, lvalue_aux1right
)) :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) =>
 let val  result = MlyValue.lvalue (fn _ => let val  (ID as ID1) = ID1
 ()
 val  (lvalue_aux as lvalue_aux1) = lvalue_aux1 ()
 in (lvalue_gen(A.SimpleVar (S.symbol(ID), IDleft), lvalue_aux))
end)
 in ( LrTable.NT 21, ( result, ID1left, lvalue_aux1right), rest671)

end
|  ( 56, ( rest671)) => let val  result = MlyValue.lvalue_aux (fn _ =>
 ([]))
 in ( LrTable.NT 22, ( result, defaultPos, defaultPos), rest671)
end
|  ( 57, ( ( _, ( MlyValue.lvalue_aux lvalue_aux1, _, lvalue_aux1right
)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (DOTleft as DOT1left
), _)) :: rest671)) => let val  result = MlyValue.lvalue_aux (fn _ =>
 let val  (ID as ID1) = ID1 ()
 val  (lvalue_aux as lvalue_aux1) = lvalue_aux1 ()
 in ((Field(S.symbol(ID), DOTleft)) :: lvalue_aux)
end)
 in ( LrTable.NT 22, ( result, DOT1left, lvalue_aux1right), rest671)

end
|  ( 58, ( ( _, ( MlyValue.lvalue_aux lvalue_aux1, _, lvalue_aux1right
)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, (LBRACKleft
 as LBRACK1left), _)) :: rest671)) => let val  result = 
MlyValue.lvalue_aux (fn _ => let val  (exp as exp1) = exp1 ()
 val  (lvalue_aux as lvalue_aux1) = lvalue_aux1 ()
 in ((Subscript(exp, LBRACKleft)) :: lvalue_aux )
end)
 in ( LrTable.NT 22, ( result, LBRACK1left, lvalue_aux1right), rest671
)
end
|  ( 59, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.loop_exp (fn _ => (
A.BreakExp BREAKleft))
 in ( LrTable.NT 18, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.loop_exp (fn _ => let val 
 exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
end)
 in ( LrTable.NT 18, ( result, WHILE1left, exp2right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.loop_exp (fn _ =>
 let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp {var={name=S.symbol(ID), escape=ref true}:A.vardec, lo=exp1, hi=exp2, body=exp3, pos=FORleft}
)
end)
 in ( LrTable.NT 18, ( result, FOR1left, exp3right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.if_exp (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
end)
 in ( LrTable.NT 19, ( result, IF1left, exp2right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.if_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})

end)
 in ( LrTable.NT 19, ( result, IF1left, exp3right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.assign_exp (fn _ => let val  (lvalue
 as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})
end)
 in ( LrTable.NT 12, ( result, lvalue1left, exp1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft
 as ID1left), _)) :: rest671)) => let val  result = MlyValue.array_exp
 (fn _ => let val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.ArrayExp {typ=S.symbol(ID), size=exp1, init=exp2, pos=IDleft})

end)
 in ( LrTable.NT 13, ( result, ID1left, exp2right), rest671)
end
|  ( 66, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.record_exp (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp {fields=[], typ=S.symbol(ID), pos=IDleft})
end)
 in ( LrTable.NT 14, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 67, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.record_aux 
record_aux1, _, _)) :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, (
 MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left
, _)) :: rest671)) => let val  result = MlyValue.record_exp (fn _ =>
 let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 val  (record_aux as record_aux1) = record_aux1 ()
 in (
A.RecordExp {fields=(S.symbol(ID2), exp, ID2left)::record_aux, typ=S.symbol(ID1), pos=ID1left}
)
end)
 in ( LrTable.NT 14, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 68, ( rest671)) => let val  result = MlyValue.record_aux (fn _ =>
 ([]))
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 69, ( ( _, ( MlyValue.record_aux record_aux1, _, record_aux1right
)) :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 IDleft, _)) :: ( _, ( _, COMMA1left, _)) :: rest671)) => let val  
result = MlyValue.record_aux (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 val  (record_aux as record_aux1) = record_aux1 ()
 in ((S.symbol(ID), exp, IDleft)::record_aux)
end)
 in ( LrTable.NT 15, ( result, COMMA1left, record_aux1right), rest671)

end
|  ( 70, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.func_exp (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.AppExp {func=S.symbol(ID), args=[], pos=IDleft})
end)
 in ( LrTable.NT 16, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 71, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.func_aux 
func_aux1, _, _)) :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.func_exp (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 val  (func_aux as func_aux1) = func_aux1 ()
 in (A.AppExp {func=S.symbol(ID), args=exp::func_aux, pos=IDleft})
end
)
 in ( LrTable.NT 16, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 72, ( rest671)) => let val  result = MlyValue.func_aux (fn _ => (
[]))
 in ( LrTable.NT 17, ( result, defaultPos, defaultPos), rest671)
end
|  ( 73, ( ( _, ( MlyValue.func_aux func_aux1, _, func_aux1right)) :: 
( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, COMMA1left, _)) :: 
rest671)) => let val  result = MlyValue.func_aux (fn _ => let val  (
exp as exp1) = exp1 ()
 val  (func_aux as func_aux1) = func_aux1 ()
 in (exp::func_aux)
end)
 in ( LrTable.NT 17, ( result, COMMA1left, func_aux1right), rest671)

end
|  ( 74, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.expseq expseq1,
 _, _)) :: _ :: ( _, ( MlyValue.decs decs1, _, _)) :: ( _, ( _, (
LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.let_exp (fn _ => let val  (decs as decs1) = decs1 ()
 val  (expseq as expseq1) = expseq1 ()
 in (A.LetExp {decs=decs, body=A.SeqExp expseq, pos=LETleft})
end)
 in ( LrTable.NT 11, ( result, LET1left, END1right), rest671)
end
|  ( 75, ( rest671)) => let val  result = MlyValue.expseq (fn _ => ([]
))
 in ( LrTable.NT 29, ( result, defaultPos, defaultPos), rest671)
end
|  ( 76, ( ( _, ( MlyValue.expseq_aux expseq_aux1, _, expseq_aux1right
)) :: ( _, ( MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)
) => let val  result = MlyValue.expseq (fn _ => let val  (exp as exp1)
 = exp1 ()
 val  (expseq_aux as expseq_aux1) = expseq_aux1 ()
 in ((exp, expleft) :: expseq_aux)
end)
 in ( LrTable.NT 29, ( result, exp1left, expseq_aux1right), rest671)

end
|  ( 77, ( rest671)) => let val  result = MlyValue.expseq_aux (fn _ =>
 ([]))
 in ( LrTable.NT 30, ( result, defaultPos, defaultPos), rest671)
end
|  ( 78, ( ( _, ( MlyValue.expseq_aux expseq_aux1, _, expseq_aux1right
)) :: ( _, ( MlyValue.exp exp1, expleft, _)) :: ( _, ( _, 
SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.expseq_aux (fn _ => let val  (exp as exp1) = exp1 ()
 val  (expseq_aux as expseq_aux1) = expseq_aux1 ()
 in ((exp, expleft) :: expseq_aux)
end)
 in ( LrTable.NT 30, ( result, SEMICOLON1left, expseq_aux1right), 
rest671)
end
|  ( 79, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.seq_exp_aux 
seq_exp_aux1, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, expleft, _)) ::
 ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.seq_exp (fn _ => let val  (exp as exp1) = exp1 ()
 val  (seq_exp_aux as seq_exp_aux1) = seq_exp_aux1 ()
 in (A.SeqExp ((exp, expleft) :: seq_exp_aux))
end)
 in ( LrTable.NT 27, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 80, ( ( _, ( MlyValue.seq_exp_aux seq_exp_aux1, _, 
seq_exp_aux1right)) :: _ :: ( _, ( MlyValue.exp exp1, (expleft as 
exp1left), _)) :: rest671)) => let val  result = MlyValue.seq_exp_aux
 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (seq_exp_aux as seq_exp_aux1) = seq_exp_aux1 ()
 in ((exp, expleft) :: seq_exp_aux)
end)
 in ( LrTable.NT 28, ( result, exp1left, seq_exp_aux1right), rest671)

end
|  ( 81, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.seq_exp_aux (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ([(exp, expleft)])
end)
 in ( LrTable.NT 28, ( result, exp1left, exp1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
