
state 0:

	program : . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	program	goto 158
	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 1

	.	error


state 1:

	program : exp .  (reduce by rule 0)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 0


state 2:

	exp : uni_exp .  (reduce by rule 32)



	.	reduce by rule 32


state 3:

	exp : cmp_exp .  (reduce by rule 31)



	.	reduce by rule 31


state 4:

	exp : bool_exp .  (reduce by rule 30)



	.	reduce by rule 30


state 5:

	exp : ari_exp .  (reduce by rule 29)



	.	reduce by rule 29


state 6:

	exp : if_exp .  (reduce by rule 24)



	.	reduce by rule 24


state 7:

	exp : loop_exp .  (reduce by rule 23)



	.	reduce by rule 23


state 8:

	exp : array_exp .  (reduce by rule 26)



	.	reduce by rule 26


state 9:

	exp : assign_exp .  (reduce by rule 25)



	.	reduce by rule 25


state 10:

	exp : let_exp .  (reduce by rule 22)



	.	reduce by rule 22


state 11:

	assign_exp : lvalue . ASSIGN exp 
	exp : lvalue .  (reduce by rule 33)

	ASSIGN	shift 37


	.	reduce by rule 33


state 12:

	exp : func_exp .  (reduce by rule 28)



	.	reduce by rule 28


state 13:

	exp : record_exp .  (reduce by rule 27)



	.	reduce by rule 27


state 14:

	uni_exp : NIL .  (reduce by rule 38)



	.	reduce by rule 38


state 15:

	loop_exp : BREAK .  (reduce by rule 40)



	.	reduce by rule 40


state 16:

	let_exp : LET . decs IN expseq END 

	FUNCTION	shift 45
	VAR	shift 44
	TYPE	shift 43

	decs	goto 42
	dec	goto 41
	fundecs	goto 40
	tydecs	goto 39
	vardec	goto 38

	.	reduce by rule 1


state 17:

	loop_exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 46


	.	error


state 18:

	loop_exp : WHILE . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 47

	.	error


state 19:

	if_exp : IF . exp THEN exp 
	if_exp : IF . exp THEN exp ELSE exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 48

	.	error


state 20:

	ari_exp : MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 49

	.	error


state 21:

	exp : LPAREN . expseq RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	expseq	goto 51
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 50

	.	reduce by rule 58


state 22:

	uni_exp : STRING .  (reduce by rule 39)



	.	reduce by rule 39


state 23:

	uni_exp : INT .  (reduce by rule 37)



	.	reduce by rule 37


state 24:

	record_exp : ID . LBRACE RBRACE 
	record_exp : ID . LBRACE ID EQ exp record_aux RBRACE 
	func_exp : ID . LPAREN RPAREN 
	func_exp : ID . LPAREN exp func_aux RPAREN 
	lvalue : ID . lvalue_aux 
	array_exp : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 56
	LBRACK	shift 55
	LBRACE	shift 54
	DOT	shift 53

	lvalue_aux	goto 52

	.	reduce by rule 63


state 25:

	bool_exp : exp OR . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 57

	.	error


state 26:

	bool_exp : exp AND . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 58

	.	error


state 27:

	cmp_exp : exp GE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 59

	.	error


state 28:

	cmp_exp : exp GT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 60

	.	error


state 29:

	cmp_exp : exp LE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 61

	.	error


state 30:

	cmp_exp : exp LT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 62

	.	error


state 31:

	cmp_exp : exp NEQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 63

	.	error


state 32:

	cmp_exp : exp EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 64

	.	error


state 33:

	ari_exp : exp DIVIDE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 65

	.	error


state 34:

	ari_exp : exp TIMES . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 66

	.	error


state 35:

	ari_exp : exp MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 67

	.	error


state 36:

	ari_exp : exp PLUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 68

	.	error


state 37:

	assign_exp : lvalue ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 69

	.	error


state 38:

	dec : vardec .  (reduce by rule 4)



	.	reduce by rule 4


state 39:

	dec : tydecs .  (reduce by rule 3)



	.	reduce by rule 3


state 40:

	dec : fundecs .  (reduce by rule 5)



	.	reduce by rule 5


state 41:

	decs : dec . decs 

	FUNCTION	shift 45
	VAR	shift 44
	TYPE	shift 43

	decs	goto 70
	dec	goto 41
	fundecs	goto 40
	tydecs	goto 39
	vardec	goto 38

	.	reduce by rule 1


state 42:

	let_exp : LET decs . IN expseq END 

	IN	shift 71


	.	error


state 43:

	tydecs : TYPE . ID EQ ty 
	tydecs : TYPE . ID EQ ty tydecs 

	ID	shift 72


	.	error


state 44:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 73


	.	error


state 45:

	fundecs : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundecs : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 
	fundecs : FUNCTION . ID LPAREN tyfields RPAREN EQ exp fundecs 
	fundecs : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp fundecs 

	ID	shift 74


	.	error


state 46:

	loop_exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 75


	.	error


state 47:

	loop_exp : WHILE exp . DO exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	DO	shift 76


	.	error


state 48:

	if_exp : IF exp . THEN exp 
	if_exp : IF exp . THEN exp ELSE exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	THEN	shift 77


	.	error


state 49:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	ari_exp : MINUS exp .  (reduce by rule 49)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 



	.	reduce by rule 49


state 50:

	expseq : exp . expseq_aux 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	SEMICOLON	shift 79
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	expseq_aux	goto 78

	.	reduce by rule 60


state 51:

	exp : LPAREN expseq . RPAREN 

	RPAREN	shift 80


	.	error


state 52:

	lvalue : ID lvalue_aux .  (reduce by rule 62)



	.	reduce by rule 62


state 53:

	lvalue_aux : DOT . ID lvalue_aux 

	ID	shift 81


	.	error


state 54:

	record_exp : ID LBRACE . RBRACE 
	record_exp : ID LBRACE . ID EQ exp record_aux RBRACE 

	ID	shift 83
	RBRACE	shift 82


	.	error


state 55:

	lvalue_aux : LBRACK . exp RBRACK lvalue_aux 
	array_exp : ID LBRACK . exp RBRACK OF exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 84

	.	error


state 56:

	func_exp : ID LPAREN . RPAREN 
	func_exp : ID LPAREN . exp func_aux RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	RPAREN	shift 86
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 85

	.	error


state 57:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	bool_exp : exp OR exp .  (reduce by rule 51)
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26


	.	reduce by rule 51


state 58:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp AND exp .  (reduce by rule 50)
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27


	.	reduce by rule 50


state 59:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp GE exp .  (reduce by rule 56)
	cmp_exp : exp . LE exp 

	EOF	reduce by rule 56
	COMMA	reduce by rule 56
	SEMICOLON	reduce by rule 56
	RPAREN	reduce by rule 56
	RBRACK	reduce by rule 56
	RBRACE	reduce by rule 56
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 56
	OR	reduce by rule 56
	THEN	reduce by rule 56
	ELSE	reduce by rule 56
	TO	reduce by rule 56
	DO	reduce by rule 56
	IN	reduce by rule 56
	END	reduce by rule 56
	FUNCTION	reduce by rule 56
	VAR	reduce by rule 56
	TYPE	reduce by rule 56


	.	error


state 60:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp GT exp .  (reduce by rule 54)
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	EOF	reduce by rule 54
	COMMA	reduce by rule 54
	SEMICOLON	reduce by rule 54
	RPAREN	reduce by rule 54
	RBRACK	reduce by rule 54
	RBRACE	reduce by rule 54
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 54
	OR	reduce by rule 54
	THEN	reduce by rule 54
	ELSE	reduce by rule 54
	TO	reduce by rule 54
	DO	reduce by rule 54
	IN	reduce by rule 54
	END	reduce by rule 54
	FUNCTION	reduce by rule 54
	VAR	reduce by rule 54
	TYPE	reduce by rule 54


	.	error


state 61:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 
	cmp_exp : exp LE exp .  (reduce by rule 57)

	EOF	reduce by rule 57
	COMMA	reduce by rule 57
	SEMICOLON	reduce by rule 57
	RPAREN	reduce by rule 57
	RBRACK	reduce by rule 57
	RBRACE	reduce by rule 57
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 57
	OR	reduce by rule 57
	THEN	reduce by rule 57
	ELSE	reduce by rule 57
	TO	reduce by rule 57
	DO	reduce by rule 57
	IN	reduce by rule 57
	END	reduce by rule 57
	FUNCTION	reduce by rule 57
	VAR	reduce by rule 57
	TYPE	reduce by rule 57


	.	error


state 62:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp LT exp .  (reduce by rule 55)
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	EOF	reduce by rule 55
	COMMA	reduce by rule 55
	SEMICOLON	reduce by rule 55
	RPAREN	reduce by rule 55
	RBRACK	reduce by rule 55
	RBRACE	reduce by rule 55
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 55
	OR	reduce by rule 55
	THEN	reduce by rule 55
	ELSE	reduce by rule 55
	TO	reduce by rule 55
	DO	reduce by rule 55
	IN	reduce by rule 55
	END	reduce by rule 55
	FUNCTION	reduce by rule 55
	VAR	reduce by rule 55
	TYPE	reduce by rule 55


	.	error


state 63:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp NEQ exp .  (reduce by rule 53)
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	EOF	reduce by rule 53
	COMMA	reduce by rule 53
	SEMICOLON	reduce by rule 53
	RPAREN	reduce by rule 53
	RBRACK	reduce by rule 53
	RBRACE	reduce by rule 53
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 53
	OR	reduce by rule 53
	THEN	reduce by rule 53
	ELSE	reduce by rule 53
	TO	reduce by rule 53
	DO	reduce by rule 53
	IN	reduce by rule 53
	END	reduce by rule 53
	FUNCTION	reduce by rule 53
	VAR	reduce by rule 53
	TYPE	reduce by rule 53


	.	error


state 64:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp EQ exp .  (reduce by rule 52)
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	EOF	reduce by rule 52
	COMMA	reduce by rule 52
	SEMICOLON	reduce by rule 52
	RPAREN	reduce by rule 52
	RBRACK	reduce by rule 52
	RBRACE	reduce by rule 52
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	AND	reduce by rule 52
	OR	reduce by rule 52
	THEN	reduce by rule 52
	ELSE	reduce by rule 52
	TO	reduce by rule 52
	DO	reduce by rule 52
	IN	reduce by rule 52
	END	reduce by rule 52
	FUNCTION	reduce by rule 52
	VAR	reduce by rule 52
	TYPE	reduce by rule 52


	.	error


state 65:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	ari_exp : exp DIVIDE exp .  (reduce by rule 48)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 



	.	reduce by rule 48


state 66:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp TIMES exp .  (reduce by rule 47)
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 



	.	reduce by rule 47


state 67:

	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp MINUS exp .  (reduce by rule 46)
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	TIMES	shift 34
	DIVIDE	shift 33


	.	reduce by rule 46


state 68:

	ari_exp : exp . PLUS exp 
	ari_exp : exp PLUS exp .  (reduce by rule 45)
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	TIMES	shift 34
	DIVIDE	shift 33


	.	reduce by rule 45


state 69:

	assign_exp : lvalue ASSIGN exp .  (reduce by rule 35)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 35


state 70:

	decs : dec decs .  (reduce by rule 2)



	.	reduce by rule 2


state 71:

	let_exp : LET decs IN . expseq END 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	expseq	goto 87
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 50

	.	reduce by rule 58


state 72:

	tydecs : TYPE ID . EQ ty 
	tydecs : TYPE ID . EQ ty tydecs 

	EQ	shift 88


	.	error


state 73:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 90
	ASSIGN	shift 89


	.	error


state 74:

	fundecs : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundecs : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 
	fundecs : FUNCTION ID . LPAREN tyfields RPAREN EQ exp fundecs 
	fundecs : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp fundecs 

	LPAREN	shift 91


	.	error


state 75:

	loop_exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 92

	.	error


state 76:

	loop_exp : WHILE exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 93

	.	error


state 77:

	if_exp : IF exp THEN . exp 
	if_exp : IF exp THEN . exp ELSE exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 94

	.	error


state 78:

	expseq : exp expseq_aux .  (reduce by rule 59)



	.	reduce by rule 59


state 79:

	expseq_aux : SEMICOLON . exp expseq_aux 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 95

	.	error


state 80:

	exp : LPAREN expseq RPAREN .  (reduce by rule 21)



	.	reduce by rule 21


state 81:

	lvalue_aux : DOT ID . lvalue_aux 

	LBRACK	shift 97
	DOT	shift 53

	lvalue_aux	goto 96

	.	reduce by rule 63


state 82:

	record_exp : ID LBRACE RBRACE .  (reduce by rule 66)



	.	reduce by rule 66


state 83:

	record_exp : ID LBRACE ID . EQ exp record_aux RBRACE 

	EQ	shift 98


	.	error


state 84:

	lvalue_aux : LBRACK exp . RBRACK lvalue_aux 
	array_exp : ID LBRACK exp . RBRACK OF exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	RBRACK	shift 99
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	error


state 85:

	func_exp : ID LPAREN exp . func_aux RPAREN 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	COMMA	shift 101
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	func_aux	goto 100

	.	reduce by rule 72


state 86:

	func_exp : ID LPAREN RPAREN .  (reduce by rule 70)



	.	reduce by rule 70


state 87:

	let_exp : LET decs IN expseq . END 

	END	shift 102


	.	error


state 88:

	tydecs : TYPE ID EQ . ty 
	tydecs : TYPE ID EQ . ty tydecs 

	ID	shift 106
	LBRACE	shift 105
	ARRAY	shift 104

	ty	goto 103

	.	error


state 89:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 107

	.	error


state 90:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 108


	.	error


state 91:

	fundecs : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundecs : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 
	fundecs : FUNCTION ID LPAREN . tyfields RPAREN EQ exp fundecs 
	fundecs : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp fundecs 

	ID	shift 110

	tyfields	goto 109

	.	reduce by rule 11


state 92:

	loop_exp : FOR ID ASSIGN exp . TO exp DO exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	TO	shift 111


	.	error


state 93:

	loop_exp : WHILE exp DO exp .  (reduce by rule 41)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 41


state 94:

	if_exp : IF exp THEN exp .  (reduce by rule 43)
	if_exp : IF exp THEN exp . ELSE exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	ELSE	shift 112


	.	reduce by rule 43


state 95:

	expseq_aux : SEMICOLON exp . expseq_aux 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	SEMICOLON	shift 79
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	expseq_aux	goto 113

	.	reduce by rule 60


state 96:

	lvalue_aux : DOT ID lvalue_aux .  (reduce by rule 64)



	.	reduce by rule 64


state 97:

	lvalue_aux : LBRACK . exp RBRACK lvalue_aux 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 114

	.	error


state 98:

	record_exp : ID LBRACE ID EQ . exp record_aux RBRACE 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 115

	.	error


state 99:

	lvalue_aux : LBRACK exp RBRACK . lvalue_aux 
	array_exp : ID LBRACK exp RBRACK . OF exp 

	LBRACK	shift 97
	DOT	shift 53
	OF	shift 117

	lvalue_aux	goto 116

	.	reduce by rule 63


state 100:

	func_exp : ID LPAREN exp func_aux . RPAREN 

	RPAREN	shift 118


	.	error


state 101:

	func_aux : COMMA . exp func_aux 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 119

	.	error


state 102:

	let_exp : LET decs IN expseq END .  (reduce by rule 34)



	.	reduce by rule 34


state 103:

	tydecs : TYPE ID EQ ty .  (reduce by rule 6)
	tydecs : TYPE ID EQ ty . tydecs 

	TYPE	shift 43

	tydecs	goto 120

	.	reduce by rule 6


state 104:

	ty : ARRAY . OF ID 

	OF	shift 121


	.	error


state 105:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 110

	tyfields	goto 122

	.	reduce by rule 11


state 106:

	ty : ID .  (reduce by rule 8)



	.	reduce by rule 8


state 107:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 15)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 15


state 108:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 123


	.	error


state 109:

	fundecs : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields . RPAREN EQ exp fundecs 
	fundecs : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp fundecs 

	RPAREN	shift 124


	.	error


state 110:

	tyfields : ID . COLON ID tyfields_aux 

	COLON	shift 125


	.	error


state 111:

	loop_exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 126

	.	error


state 112:

	if_exp : IF exp THEN exp ELSE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 127

	.	error


state 113:

	expseq_aux : SEMICOLON exp expseq_aux .  (reduce by rule 61)



	.	reduce by rule 61


state 114:

	lvalue_aux : LBRACK exp . RBRACK lvalue_aux 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	RBRACK	shift 128
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	error


state 115:

	record_exp : ID LBRACE ID EQ exp . record_aux RBRACE 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	COMMA	shift 130
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	record_aux	goto 129

	.	reduce by rule 68


state 116:

	lvalue_aux : LBRACK exp RBRACK lvalue_aux .  (reduce by rule 65)



	.	reduce by rule 65


state 117:

	array_exp : ID LBRACK exp RBRACK OF . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 131

	.	error


state 118:

	func_exp : ID LPAREN exp func_aux RPAREN .  (reduce by rule 71)



	.	reduce by rule 71


state 119:

	func_aux : COMMA exp . func_aux 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	COMMA	shift 101
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	func_aux	goto 132

	.	reduce by rule 72


state 120:

	tydecs : TYPE ID EQ ty tydecs .  (reduce by rule 7)



	.	reduce by rule 7


state 121:

	ty : ARRAY OF . ID 

	ID	shift 133


	.	error


state 122:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 134


	.	error


state 123:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 135

	.	error


state 124:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN . EQ exp fundecs 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp fundecs 

	COLON	shift 137
	EQ	shift 136


	.	error


state 125:

	tyfields : ID COLON . ID tyfields_aux 

	ID	shift 138


	.	error


state 126:

	loop_exp : FOR ID ASSIGN exp TO exp . DO exp 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	DO	shift 139


	.	error


state 127:

	if_exp : IF exp THEN exp ELSE exp .  (reduce by rule 44)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 44


state 128:

	lvalue_aux : LBRACK exp RBRACK . lvalue_aux 

	LBRACK	shift 97
	DOT	shift 53

	lvalue_aux	goto 116

	.	reduce by rule 63


state 129:

	record_exp : ID LBRACE ID EQ exp record_aux . RBRACE 

	RBRACE	shift 140


	.	error


state 130:

	record_aux : COMMA . ID EQ exp record_aux 

	ID	shift 141


	.	error


state 131:

	array_exp : ID LBRACK exp RBRACK OF exp .  (reduce by rule 36)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 36


state 132:

	func_aux : COMMA exp func_aux .  (reduce by rule 73)



	.	reduce by rule 73


state 133:

	ty : ARRAY OF ID .  (reduce by rule 10)



	.	reduce by rule 10


state 134:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 9)



	.	reduce by rule 9


state 135:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 16)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 16


state 136:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN EQ . exp fundecs 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 142

	.	error


state 137:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp fundecs 

	ID	shift 143


	.	error


state 138:

	tyfields : ID COLON ID . tyfields_aux 

	COMMA	shift 145

	tyfields_aux	goto 144

	.	reduce by rule 13


state 139:

	loop_exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 146

	.	error


state 140:

	record_exp : ID LBRACE ID EQ exp record_aux RBRACE .  (reduce by rule 67)



	.	reduce by rule 67


state 141:

	record_aux : COMMA ID . EQ exp record_aux 

	EQ	shift 147


	.	error


state 142:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 17)
	fundecs : FUNCTION ID LPAREN tyfields RPAREN EQ exp . fundecs 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	FUNCTION	shift 45

	fundecs	goto 148

	.	reduce by rule 17


state 143:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp fundecs 

	EQ	shift 149


	.	error


state 144:

	tyfields : ID COLON ID tyfields_aux .  (reduce by rule 12)



	.	reduce by rule 12


state 145:

	tyfields_aux : COMMA . ID COLON ID tyfields_aux 

	ID	shift 150


	.	error


state 146:

	loop_exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 42)
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25


	.	reduce by rule 42


state 147:

	record_aux : COMMA ID EQ . exp record_aux 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 151

	.	error


state 148:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN EQ exp fundecs .  (reduce by rule 19)



	.	reduce by rule 19


state 149:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 
	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp fundecs 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	record_exp	goto 13
	func_exp	goto 12
	lvalue	goto 11
	let_exp	goto 10
	assign_exp	goto 9
	array_exp	goto 8
	loop_exp	goto 7
	if_exp	goto 6
	ari_exp	goto 5
	bool_exp	goto 4
	cmp_exp	goto 3
	uni_exp	goto 2
	exp	goto 152

	.	error


state 150:

	tyfields_aux : COMMA ID . COLON ID tyfields_aux 

	COLON	shift 153


	.	error


state 151:

	record_aux : COMMA ID EQ exp . record_aux 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	COMMA	shift 130
	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25

	record_aux	goto 154

	.	reduce by rule 68


state 152:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 18)
	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp . fundecs 
	ari_exp : exp . PLUS exp 
	ari_exp : exp . MINUS exp 
	ari_exp : exp . TIMES exp 
	ari_exp : exp . DIVIDE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	cmp_exp : exp . EQ exp 
	cmp_exp : exp . NEQ exp 
	cmp_exp : exp . GT exp 
	cmp_exp : exp . LT exp 
	cmp_exp : exp . GE exp 
	cmp_exp : exp . LE exp 

	PLUS	shift 36
	MINUS	shift 35
	TIMES	shift 34
	DIVIDE	shift 33
	EQ	shift 32
	NEQ	shift 31
	LT	shift 30
	LE	shift 29
	GT	shift 28
	GE	shift 27
	AND	shift 26
	OR	shift 25
	FUNCTION	shift 45

	fundecs	goto 155

	.	reduce by rule 18


state 153:

	tyfields_aux : COMMA ID COLON . ID tyfields_aux 

	ID	shift 156


	.	error


state 154:

	record_aux : COMMA ID EQ exp record_aux .  (reduce by rule 69)



	.	reduce by rule 69


state 155:

	fundecs : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundecs .  (reduce by rule 20)



	.	reduce by rule 20


state 156:

	tyfields_aux : COMMA ID COLON ID . tyfields_aux 

	COMMA	shift 145

	tyfields_aux	goto 157

	.	reduce by rule 13


state 157:

	tyfields_aux : COMMA ID COLON ID tyfields_aux .  (reduce by rule 14)



	.	reduce by rule 14


state 158:


	EOF	accept


	.	error

492 of 1071 action table entries left after compaction
512 goto table entries
