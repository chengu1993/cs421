structure A = Absyn
structure S = Symbol

datatype lvalue_var
    = Field of A.symbol * A.pos
    | Subscript of A.exp * A.pos

fun lvalue_gen(v, []) = v
  | lvalue_gen(v, Field(s, p)::r) = lvalue_gen(A.FieldVar (v, s, p), r)
  | lvalue_gen(v, Subscript(e, p)::r) = lvalue_gen(A.SubscriptVar (v, e, p), r)
    
fun formalize([]) = []
  | formalize(({name=n,typ=t,pos=p}:A.tfield)::r) = ({var={name=n, escape=ref true}, typ=t, pos=p}:A.formals) :: formalize(r)


%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | UMINUS | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  
     program of A.exp  
   | decs of A.dec list | dec of A.dec 
   | fundecs of A.dec | fundecs_aux of A.fundec list
   | tydecs of A.dec | tydecs_aux of {name: A.symbol, ty: A.ty, pos: A.pos} list
   | tyfields of A.tfield list | tyfields_aux of A.tfield list
   | vardec of A.dec | ty of A.ty
   | let_exp of A.exp
   | assign_exp of A.exp 
   | array_exp of A.exp 
   | record_exp of A.exp | record_aux of A.efield list
   | func_exp of A.exp | func_aux of A.exp list
   | loop_exp of A.exp 
   | if_exp of A.exp
   | lvalue_exp of A.exp | lvalue of A.var | lvalue_aux of lvalue_var list
   | ari_exp of A.exp | bool_exp of A.exp 
   | cmp_exp of A.exp | uni_exp of A.exp 
   | seq_exp of A.exp | seq_exp_aux of (A.exp * A.pos) list
   | expseq of (A.exp * A.pos) list | expseq_aux of (A.exp * A.pos) list 
   | exp of A.exp


%pos int
%verbose
%nonassoc LPAREN
%nonassoc RPAREN
%nonassoc DO
%nonassoc THEN
%nonassoc ELSE
%nonassoc ASSIGN
%nonassoc OF
%left OR
%left AND
%nonassoc EQ NEQ LT GT LE GE
%nonassoc FUNCTION TYPE
%nonassoc LBRACK
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS




%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

decs :                                                       ([])
     | dec decs                                              (dec::decs)

dec : tydecs                                                 (tydecs)
    | vardec                                                 (vardec)
    | fundecs                                                (fundecs)

tydecs : tydecs_aux (A.TypeDec tydecs_aux)

tydecs_aux: TYPE ID EQ ty ([{name=S.symbol(ID), ty=ty, pos=TYPEleft}])
          | TYPE ID EQ ty tydecs_aux (({name=S.symbol(ID), ty=ty, pos=TYPEleft})::tydecs_aux)

ty  : ID                                                (A.NameTy(S.symbol(ID), IDleft))
    | LBRACE tyfields RBRACE                            (A.RecordTy(tyfields))
    | ARRAY OF ID                                       (A.ArrayTy(S.symbol(ID), ARRAYleft))

tyfields :                              ([])
         | ID COLON ID tyfields_aux     (({name=S.symbol(ID1), typ=S.symbol(ID2), pos=ID1left}:A.tfield) :: tyfields_aux)

tyfields_aux :                                               ([])
             | COMMA ID COLON ID tyfields_aux   (({name=S.symbol(ID1), typ=S.symbol(ID2), pos=ID1left}:A.tfield) :: tyfields_aux)

vardec : VAR ID ASSIGN exp              (A.VarDec {var={name=S.symbol(ID), escape = ref true}, typ=NONE, init=exp, pos=VARleft})
       | VAR ID COLON ID ASSIGN exp     (A.VarDec {var={name=S.symbol(ID1), escape = ref true}, typ=SOME(S.symbol(ID2), ID2left), init=exp, pos=VARleft})

fundecs: fundecs_aux (A.FunctionDec fundecs_aux)

fundecs_aux :  FUNCTION ID LPAREN tyfields RPAREN EQ exp        ([{name=S.symbol(ID), params=formalize(tyfields), result=NONE, body=exp, pos=FUNCTIONleft}:A.fundec])
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ([{name=S.symbol(ID1), params=formalize(tyfields), result=SOME(S.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}])
       | FUNCTION ID LPAREN tyfields RPAREN EQ exp  fundecs_aux      ({name=S.symbol(ID), params=formalize(tyfields), result=NONE, body=exp, pos=FUNCTIONleft} :: fundecs_aux)
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundecs_aux ({name=S.symbol(ID1), params=formalize(tyfields), result=SOME(S.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft} :: fundecs_aux)

program	: exp				(exp)

exp :  uni_exp                             (uni_exp)
    | ari_exp                             (ari_exp)
    | bool_exp                            (bool_exp)
    | cmp_exp                             (cmp_exp)
    | lvalue_exp                          (lvalue_exp)
    | loop_exp                            (loop_exp)
    | if_exp                              (if_exp)
    | assign_exp                        (assign_exp)
    | array_exp                         (array_exp)
    | record_exp                        (record_exp)
    | func_exp                           (func_exp) 
    | let_exp                            (let_exp)
    | seq_exp                            (seq_exp)
    | LPAREN exp RPAREN     (exp)

uni_exp : INT               (A.IntExp INT)
        | NIL               (A.NilExp) 
        | STRING            (A.StringExp(STRING, STRINGleft))
        | LPAREN RPAREN     (A.SeqExp []) 

cmp_exp : exp EQ exp        (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
        | exp NEQ exp       (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})  
        | exp GT exp        (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}) 
        | exp LT exp        (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})  
        | exp GE exp        (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}) 
        | exp LE exp        (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})

bool_exp : exp AND exp      (A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left}) 
         | exp OR exp     (A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})


ari_exp : exp PLUS exp       (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})  
        | exp MINUS exp      (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
        | exp TIMES exp       (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
        | exp DIVIDE exp      (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})
        | MINUS exp %prec UMINUS  (A.OpExp {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}) 

lvalue_exp : lvalue      (A.VarExp lvalue)

lvalue  : ID lvalue_aux (lvalue_gen(A.SimpleVar (S.symbol(ID), IDleft), lvalue_aux))

lvalue_aux :                                                 ([]) 
           | DOT ID lvalue_aux                          ((Field(S.symbol(ID), DOTleft)) :: lvalue_aux)
           | LBRACK exp RBRACK lvalue_aux               ((Subscript(exp, LBRACKleft)) :: lvalue_aux )

loop_exp : BREAK                            (A.BreakExp BREAKleft)
         | WHILE exp DO exp                 (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
         | FOR ID ASSIGN exp TO exp DO exp                   (A.ForExp {var={name=S.symbol(ID), escape=ref true}:A.vardec, lo=exp1, hi=exp2, body=exp3, pos=FORleft})

if_exp : IF exp THEN exp                                     (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
       | IF exp THEN exp ELSE exp                            (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})

assign_exp : lvalue ASSIGN exp              (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})

array_exp : ID LBRACK exp RBRACK OF exp     (A.ArrayExp {typ=S.symbol(ID), size=exp1, init=exp2, pos=IDleft})

record_exp : ID LBRACE RBRACE                                (A.RecordExp {fields=[], typ=S.symbol(ID), pos=IDleft})
           | ID LBRACE ID EQ exp record_aux RBRACE           (A.RecordExp {fields=(S.symbol(ID2), exp, ID2left)::record_aux, typ=S.symbol(ID1), pos=ID1left})
   
    
record_aux  :                                           ([]) 
    | COMMA ID EQ exp record_aux                        ((S.symbol(ID), exp, IDleft)::record_aux)

func_exp : ID LPAREN RPAREN                     (A.AppExp {func=S.symbol(ID), args=[], pos=IDleft})
         | ID LPAREN exp func_aux RPAREN        (A.AppExp {func=S.symbol(ID), args=exp::func_aux, pos=IDleft})

func_aux  :                                                  ([])
    | COMMA exp func_aux                                     (exp::func_aux)

let_exp : LET decs IN expseq END                (A.LetExp {decs=decs, body=A.SeqExp expseq, pos=LETleft})

expseq :                                                     ([])
       | exp expseq_aux                                      ((exp, expleft) :: expseq_aux)

expseq_aux :                                                 ([])
        | SEMICOLON exp expseq_aux		    	     ((exp, expleft) :: expseq_aux)

seq_exp : LPAREN exp SEMICOLON seq_exp_aux RPAREN  (A.SeqExp ((exp, expleft) :: seq_exp_aux))

seq_exp_aux : exp SEMICOLON seq_exp_aux ((exp, expleft) :: seq_exp_aux)
            | exp ([(exp, expleft)])



