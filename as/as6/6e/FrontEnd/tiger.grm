structure A = Absyn
val sym = Symbol.symbol

fun mkFnApp i a p = A.AppExp {func = sym i, args = a, pos = p}
fun mkOp l e r p = A.OpExp {left = l, oper = e, right = r, pos = p}
fun mkAs v e p = A.AssignExp {var = v, exp = e, pos = p}
fun mkIf i t e p = A.IfExp {test = i, then' = t, else' = e, pos = p}
fun mkRec f t p = A.RecordExp {fields = f, typ = sym t, pos = p}
fun mkFnD n m r b p = {name = sym n, params = m, result = r, body = b, pos = p}
fun mkV n = {name = sym n, escape = ref true}
fun mkVDec v t e p = A.VarDec {var = mkV v, typ = t, init = e, pos = p}
fun mkWhile t b p = A.WhileExp {test = t, body = b, pos = p}
fun mkFor i l h b p = A.ForExp {var = mkV i, lo = l, hi = h, body = b, pos = p}
fun mkLet d b p = A.LetExp {decs = d, body = b, pos = p}
fun mkAr t n i p = A.ArrayExp {typ = sym t, size = n, init = i, pos = p}
fun mkFml n t p = {var = mkV n, typ = sym t, pos = p}

%%

%term TYPE | VAR | FUNCTION | BREAK | OF | END | IN | NIL | LET | DO | TO | FOR
    | WHILE | ELSE | THEN | IF | ARRAY | ASSIGN | OR | AND | GE | GT | LE | LT
    | NEQ | EQ | DIVIDE | TIMES | MINUS | PLUS | DOT | RBRACE | LBRACE | RBRACK
    | LBRACK | RPAREN | LPAREN | SEMICOLON | COLON | COMMA
    | STRING of string | INT of int | ID of string | EOF
    | UMINUS | IDX | TYX | FUNX (* dummy terminals *)
%nonterm prog of A.exp | e of A.exp | lvalue of A.var | args of A.exp list
       | efields of A.efield list | decs of A.dec list | dec of A.dec
       | seqes of A.exp | seqe of (A.exp * A.pos) list | tfield of A.tfield
       | tfields of A.tfield list | fundecs of A.fundec list
       | fundec of A.fundec | fml of A.formals list | fmls of A.formals list
       | funres of (A.symbol * A.pos) option | ty of A.ty
       | tydecs of {name: A.symbol, ty: A.ty, pos: A.pos} list

%pos int
%verbose
%start prog
%eop EOF %noshift EOF
%name Tiger
%keyword
  WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%nonassoc THEN %nonassoc ELSE (* bind ELSE to nearest THEN *)
%nonassoc TYX %nonassoc TYPE (* prefer sequence of types to single type *)
%nonassoc FUNX %nonassoc FUNCTION (* prefer sequence of fns to single fn *)
%nonassoc IDX %nonassoc LBRACK (* prefer record creation to single ID *)
%nonassoc ASSIGN DO OF (* binary ops bind tighter than loops and assignments *)
%left OR
%left AND
%nonassoc EQ NEQ GE GT LE LT
%left PLUS MINUS
%left DIVIDE TIMES
%left UMINUS

%prefer THEN ELSE LPAREN
%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

prog
  : e                               (e)

e : lvalue                          (A.VarExp lvalue)
  | NIL                             (A.NilExp)
  | INT                             (A.IntExp INT)
  | STRING                          (A.StringExp (STRING, STRINGleft))
  | ID LPAREN RPAREN                (mkFnApp ID nil IDleft)
  | ID LPAREN args RPAREN           (mkFnApp ID args IDleft)
  | e DIVIDE e                      (mkOp e1 A.DivideOp e2 DIVIDEleft)
  | e TIMES e                       (mkOp e1 A.TimesOp e2 TIMESleft)
  | e PLUS e                        (mkOp e1 A.PlusOp e2 PLUSleft)
  | e MINUS e                       (mkOp e1 A.MinusOp e2 MINUSleft)
  | MINUS e           %prec UMINUS  (mkOp (A.IntExp 0) A.MinusOp e MINUSleft)
  | e EQ e                          (mkOp e1 A.EqOp e2 EQleft)
  | e NEQ e                         (mkOp e1 A.NeqOp e2 NEQleft)
  | e GE e                          (mkOp e1 A.GeOp e2 GEleft)
  | e GT e                          (mkOp e1 A.GtOp e2 GTleft)
  | e LE e                          (mkOp e1 A.LeOp e2 LEleft)
  | e LT e                          (mkOp e1 A.LtOp e2 LTleft)
  | e AND e                         (mkIf e1 e2 (SOME (A.IntExp 0)) ANDleft)
  | e OR e                          (mkIf e1 (A.IntExp 1) (SOME e2) ORleft)
  | ID LBRACE RBRACE                (mkRec nil ID IDleft)
  | ID LBRACE efields RBRACE        (mkRec efields ID IDleft)
  | LPAREN RPAREN                   (A.SeqExp nil)
  | LPAREN e RPAREN                 (e)
  | LPAREN e SEMICOLON seqe RPAREN  (A.SeqExp ((e, eleft) :: seqe))
  | lvalue ASSIGN e                 (mkAs lvalue e ASSIGNleft)
  | IF e THEN e                     (mkIf e1 e2 NONE IFleft)
  | IF e THEN e ELSE e              (mkIf e1 e2 (SOME e3) IFleft)
  | WHILE e DO e                    (mkWhile e1 e2 WHILEleft)
  | FOR ID ASSIGN e TO e DO e       (mkFor ID e1 e2 e3 FORleft)
  | BREAK                           (A.BreakExp BREAKleft)
  | LET decs IN seqes END           (mkLet decs seqes LETleft)
  | ID LBRACK e RBRACK OF e         (mkAr ID e1 e2 IDleft)

args
  : e                           (e :: nil)
  | e COMMA args                (e :: args)

lvalue
  : ID               %prec IDX  (A.SimpleVar (sym ID, IDleft))
  | lvalue DOT ID               (A.FieldVar (lvalue, sym ID, DOTleft))
  | lvalue LBRACK e RBRACK      (A.SubscriptVar (lvalue, e, LBRACKleft))
  | ID LBRACK e RBRACK          (A.SubscriptVar (A.SimpleVar (sym ID, IDleft),
                                                 e, LBRACKleft))

efields
  : ID EQ e COMMA efields       ((sym ID, e, IDleft) :: efields)
  | ID EQ e                     ((sym ID, e, IDleft) :: nil)

seqes
  : seqe                        (A.SeqExp seqe)
  |                             (A.SeqExp nil)

seqe
  : e SEMICOLON seqe            ((e, eleft) :: seqe)
  | e                           ((e, eleft) :: nil)

decs
  : dec decs                    (dec :: decs)
  |                             (nil)

dec
  : tydecs                      (A.TypeDec tydecs)
  | VAR ID ASSIGN e             (mkVDec ID NONE e VARleft)
  | VAR ID COLON ID ASSIGN e    (mkVDec ID1 (SOME (sym ID2, ID2left)) e VARleft)
  | fundecs                     (A.FunctionDec fundecs)

tydecs
  : TYPE ID EQ ty %prec TYX ({name = sym ID, ty = ty, pos = TYPEleft} :: nil)
  | TYPE ID EQ ty tydecs    ({name = sym ID, ty = ty, pos = TYPEleft} :: tydecs)

ty
  : ID                            (A.NameTy (sym ID, IDleft))
  | LBRACE RBRACE                 (A.RecordTy nil)
  | LBRACE tfield tfields RBRACE  (A.RecordTy (tfield :: tfields))
  | ARRAY OF ID                   (A.ArrayTy (sym ID, ARRAYleft))

tfield
  : ID COLON ID                 ({name = sym ID1, typ = sym ID2, pos = ID1left})

tfields
  :                             (nil)
  | COMMA tfield tfields        (tfield :: tfields)

fundecs
  : fundec          %prec FUNX  (fundec :: nil)
  | fundec fundecs              (fundec :: fundecs)

fundec
  : FUNCTION ID fml funres EQ e (mkFnD ID fml funres e FUNCTIONleft)

funres
  :                             (NONE)
  | COLON ID                    (SOME (sym ID, IDleft))

fml
  : LPAREN RPAREN               (nil)
  | LPAREN fmls RPAREN          (fmls)

fmls
  : ID COLON ID                 (mkFml ID1 ID2 ID1left :: nil)
  | ID COLON ID COMMA fmls      (mkFml ID1 ID2 ID1left :: fmls)
